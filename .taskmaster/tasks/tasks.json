{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement Shared Layout and Navigation",
        "description": "Create the main application layout, including a responsive sidebar for navigation and a header. The layout should wrap the main content area where pages will be rendered.",
        "details": "Build a `Sidebar` component with `NavLink` components from `react-router-dom` for 'Dashboard', 'Analytics', and 'Users'. The links should use icons from `lucide-react`. Create a `Header` component, which can be a simple placeholder for now. The main layout component should use Flexbox or Grid to position the sidebar and the main content area. Ensure the layout is responsive, with the sidebar collapsing or transforming for mobile views.",
        "testStrategy": "Use Vitest and React Testing Library to render the layout. Verify that the sidebar and header are present. Test that clicking the navigation links updates the route. Use snapshot testing to capture the initial responsive layout.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Build Dashboard Metric Cards and Layout",
        "description": "Develop the main Dashboard page layout, including the four metric cards that display key performance indicators. Initially, these cards can be built with static data.",
        "details": "Create a `MetricCard` component using Shadcn's `Card` primitive. The component should accept props for title, value, change, and an icon. Arrange four instances of this component in a responsive grid at the top of the Dashboard page. Use the design tokens for spacing, colors, and typography. Fetch data from the `/metrics` endpoint using React Query's `useQuery` hook to populate the cards.",
        "testStrategy": "Unit test the `MetricCard` component to ensure it renders props correctly. Write an integration test for the Dashboard page that mocks the `/metrics` API call and verifies that four cards are rendered with the correct data.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Implement Dashboard Analytics Chart and Recent Activity",
        "description": "Add the 'Analytics Overview' line chart and the 'Recent Activity' list to the Dashboard page, fetching data from the mock API.",
        "details": "Using `recharts`, implement a `LineChart` component to visualize time-series data fetched from the `/analytics` endpoint. For the 'Recent Activity' list, fetch a subset of users from the `/users` endpoint. Create a list item component that displays the user's avatar, name, action (e.g., 'updated profile'), and a formatted timestamp.",
        "testStrategy": "Mock the `/analytics` and `/users` API endpoints. Test that the chart component renders when given data. Verify that the recent activity list displays the correct number of items with the expected content (avatar, name, etc.). Check for loading and error states during data fetching.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Develop Users Page Data Table",
        "description": "Create the Users page with a data table to display user information, including support for server-side pagination.",
        "details": "Use Shadcn's `Table` components to build a `UsersTable`. Define columns for avatar, name, email, role, status, and `createdAt`. Use React Query to fetch data from the `/users` endpoint, passing `_page` and `_limit=10` parameters. Implement a pagination component to navigate between pages, which will refetch the data with the updated page number.",
        "testStrategy": "Test the `UsersTable` component with mock user data. Write an integration test for the Users page that mocks the API and verifies the table is populated. Test the pagination controls to ensure they trigger a new API call with the correct page parameter.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Add Search, Filter, and Sort to Users Table",
        "description": "Enhance the Users table with interactive features: debounced search, filtering by role/status, and sorting by columns.",
        "details": "Add an input field for search. Implement a `useDebounce` hook to delay the API call as the user types. Add `Select` components for filtering by 'role' and 'status'. Add sorting functionality to the table headers. All these interactions should update the parameters (`q`, `role`, `status`, `_sort`, `_order`) for the `useQuery` hook, causing it to refetch the filtered/sorted data from the API.",
        "testStrategy": "Test the debounced search to ensure the API is not called on every keystroke. Write tests to verify that changing filter dropdowns or clicking sortable headers triggers an API refetch with the correct query parameters and updates the table content accordingly.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Implement Placeholder Modals for User Actions",
        "description": "Add 'Edit' and 'Delete' buttons to each row in the Users table and connect them to placeholder modal dialogs.",
        "details": "Use Shadcn's `Dialog` component to create reusable modals for 'Edit User' and 'Delete User'. The 'Edit' modal can contain a simple form, and the 'Delete' modal should have a confirmation message. Add an actions column to the `UsersTable` with buttons that open the respective modals for that user.",
        "testStrategy": "Verify that clicking the 'Edit' and 'Delete' buttons opens the correct modal. Test that the modals can be closed. Ensure the correct user's data is passed to the modal component, even if it's just to display their name in the confirmation text.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Build Analytics Page with Chart Grid",
        "description": "Construct the Analytics page, featuring a 2x2 grid of different chart types (line, bar, donut, area) using data from the API.",
        "details": "Create a responsive 2x2 grid layout on the Analytics page. Implement four distinct chart components using `recharts`: `LineChart`, `BarChart`, `PieChart` (for the donut), and `AreaChart`. Each chart should be interactive with tooltips on hover. Fetch data from the `/analytics` endpoint to populate all charts.",
        "testStrategy": "For each chart type, write a component test to ensure it renders correctly with mock data. On the Analytics page test, verify that all four charts are present and display their loading states initially, then render with data once the mock API call resolves.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Add Controls to Analytics Page",
        "description": "Implement the date range picker and data export functionality (CSV/JSON) on the Analytics page.",
        "details": "Integrate Shadcn's `DatePicker` with a range option to allow users to select a start and end date. This will eventually filter the chart data. Add 'Export to CSV' and 'Export to JSON' buttons. Implement utility functions to convert the chart data array into CSV and JSON formats and trigger a file download.",
        "testStrategy": "Test that the date range picker component opens and allows date selection. For export functionality, write unit tests for the data conversion utilities (e.g., `jsonToCsv`). Simulate a button click and verify that the download logic is triggered.",
        "priority": "low",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Implement Full Responsiveness",
        "description": "Ensure all pages and components are fully responsive across mobile, tablet, and desktop breakpoints as defined in the PRD.",
        "details": "Review every page (Dashboard, Analytics, Users) and component. Adjust layouts, font sizes, and spacing using Tailwind's responsive prefixes (e.g., `md:`, `lg:`). Specifically, transform the Users table into a card-based layout on mobile screens, where each card represents a user.",
        "testStrategy": "Use browser developer tools to manually test the UI at different screen widths. Write snapshot tests for components at various viewport sizes using Vitest's responsive testing capabilities. Verify the Users page switches from a table to a card layout below the tablet breakpoint.",
        "priority": "medium",
        "dependencies": [
          3,
          5,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Implement Loading, Error States, and Accessibility",
        "description": "Implement global loading, error, and empty states for all data-fetching operations and ensure the application meets WCAG AA accessibility standards.",
        "details": "Use the `isLoading`, `isError`, and `data` properties from React Query's `useQuery` hook to conditionally render UI states. Create reusable `Spinner`, `ErrorMessage`, and `EmptyState` components. Audit the application for accessibility: add ARIA labels to icon buttons, ensure keyboard navigability for all interactive elements, manage focus, and check color contrast.",
        "testStrategy": "Write integration tests that mock API responses to be in a loading or error state and verify that the corresponding UI is displayed. Use an automated accessibility testing tool (like `axe` with Testing Library) to catch violations. Manually test keyboard navigation and focus rings.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-21T20:43:05.174Z",
      "updated": "2025-09-21T22:32:01.474Z",
      "description": "Tasks for master context"
    }
  }
}